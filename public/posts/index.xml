<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Gennaro&#39;s Dev Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Gennaro&#39;s Dev Blog</description>
    <image>
      <title>Gennaro&#39;s Dev Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 11 Mar 2025 21:32:15 +1000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Roll Your Own Debounce</title>
      <link>http://localhost:1313/posts/roll-your-own-debounce-25-03-11/</link>
      <pubDate>Tue, 11 Mar 2025 21:32:15 +1000</pubDate>
      <guid>http://localhost:1313/posts/roll-your-own-debounce-25-03-11/</guid>
      <description>&lt;p&gt;Debounce is a technique used to ensure that a function is not called more than once in a given time period. This can be useful when dealing with events that fire rapidly, such as scroll or resize events.&lt;/p&gt;
&lt;p&gt;Alot of people import 3rd party libraries to handle this, but it&amp;rsquo;s actually quite simple to implement yourself. So, in this post, we&amp;rsquo;ll look at how to roll our own debounce functionality in JavaScript.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Click To Move in a 3D Godot 4 Project</title>
      <link>http://localhost:1313/posts/click-to-move-godot/</link>
      <pubDate>Tue, 11 Mar 2025 14:45:12 +1000</pubDate>
      <guid>http://localhost:1313/posts/click-to-move-godot/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been exploring how to go about implementing a click-to-move system in a &lt;strong&gt;3D Godot project&lt;/strong&gt;. This is a common feature in many games, especially in the RPG/RTS genres. In this post, I&amp;rsquo;ll share how I went about implementing this feature in &lt;strong&gt;Godot 4.4&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We are going to a few core concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; NavigationRegion3D&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; NavigationAgent3D&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>My First Post</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Tue, 11 Mar 2025 13:56:24 +1000</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>&lt;p&gt;Welcome to my dev blog! As you might already tell by the title, this is my first post.&lt;/p&gt;
&lt;p&gt;The goal is to document dev stuff I think is interesting, and to do so in a way that other&amp;rsquo;s will find useful.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see where things go!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to be writting a fair bit of code here so lets test a code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
